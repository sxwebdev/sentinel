// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/dashboard/stats": {
            "get": {
                "description": "Returns overall statistics for the dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get dashboard statistics",
                "responses": {
                    "200": {
                        "description": "Dashboard statistics",
                        "schema": {
                            "$ref": "#/definitions/web.DashboardStats"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/incidents": {
            "get": {
                "description": "Returns a list of recent incidents across all services",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "incidents"
                ],
                "summary": "Get recent incidents",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of incidents (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of incidents",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/web.Incident"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services": {
            "get": {
                "description": "Returns a list of all configured services with their states",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "Get all services",
                "responses": {
                    "200": {
                        "description": "List of services",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/web.FlatServiceConfig"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new service for monitoring",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "Create new service",
                "parameters": [
                    {
                        "description": "Service configuration",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.FlatServiceConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Service created",
                        "schema": {
                            "$ref": "#/definitions/storage.Service"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/config/{id}": {
            "get": {
                "description": "Returns the complete service configuration by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "Get service configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service configuration",
                        "schema": {
                            "$ref": "#/definitions/storage.Service"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/table": {
            "get": {
                "description": "Returns a list of services with incident statistics for table display",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "Get services for table",
                "responses": {
                    "200": {
                        "description": "List of services with statistics",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/web.ServiceTableDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/{id}": {
            "get": {
                "description": "Returns detailed information about a specific service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "Get service details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service details",
                        "schema": {
                            "$ref": "#/definitions/web.FlatServiceConfig"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "Update service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New service configuration",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.FlatServiceConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service updated",
                        "schema": {
                            "$ref": "#/definitions/storage.Service"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a service from the monitoring system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "Delete service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Service deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/{id}/check": {
            "post": {
                "description": "Triggers a manual check of service status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "Trigger service check",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Check triggered successfully",
                        "schema": {
                            "$ref": "#/definitions/web.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/{id}/incidents": {
            "get": {
                "description": "Returns a list of incidents for a specific service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "incidents"
                ],
                "summary": "Get service incidents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of incidents",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/web.Incident"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/{id}/resolve": {
            "post": {
                "description": "Forcefully resolves all active incidents for a service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "incidents"
                ],
                "summary": "Resolve service incidents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Incidents resolved successfully",
                        "schema": {
                            "$ref": "#/definitions/web.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/{id}/stats": {
            "get": {
                "description": "Returns service statistics for the specified period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get service statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of days (default 30)",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service statistics",
                        "schema": {
                            "$ref": "#/definitions/web.ServiceStats"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "storage.GRPCConfig": {
            "type": "object",
            "properties": {
                "check_type": {
                    "type": "string"
                },
                "insecure_tls": {
                    "type": "boolean"
                },
                "service_name": {
                    "type": "string"
                },
                "tls": {
                    "type": "boolean"
                }
            }
        },
        "storage.HTTPConfig": {
            "type": "object",
            "properties": {
                "expected_status": {
                    "type": "integer"
                },
                "extended_config": {
                    "description": "For multi-endpoint configuration",
                    "type": "object",
                    "additionalProperties": {}
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "method": {
                    "type": "string"
                }
            }
        },
        "storage.MonitorConfig": {
            "type": "object",
            "properties": {
                "grpc": {
                    "$ref": "#/definitions/storage.GRPCConfig"
                },
                "http": {
                    "$ref": "#/definitions/storage.HTTPConfig"
                },
                "redis": {
                    "$ref": "#/definitions/storage.RedisConfig"
                },
                "tcp": {
                    "$ref": "#/definitions/storage.TCPConfig"
                }
            }
        },
        "storage.RedisConfig": {
            "type": "object",
            "properties": {
                "db": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "storage.Service": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.MonitorConfig"
                },
                "endpoint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "type": "integer"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/storage.ServiceState"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeout": {
                    "type": "integer"
                }
            }
        },
        "storage.ServiceState": {
            "type": "object",
            "properties": {
                "consecutive_fails": {
                    "type": "integer"
                },
                "consecutive_success": {
                    "type": "integer"
                },
                "last_check": {
                    "type": "string"
                },
                "last_error": {
                    "type": "string"
                },
                "next_check": {
                    "type": "string"
                },
                "response_time": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/storage.ServiceStatus"
                },
                "total_checks": {
                    "type": "integer"
                }
            }
        },
        "storage.ServiceStatus": {
            "type": "string",
            "enum": [
                "unknown",
                "up",
                "down",
                "maintenance"
            ],
            "x-enum-varnames": [
                "StatusUnknown",
                "StatusUp",
                "StatusDown",
                "StatusMaintenance"
            ]
        },
        "storage.TCPConfig": {
            "type": "object",
            "properties": {
                "expect_data": {
                    "type": "string"
                },
                "send_data": {
                    "type": "string"
                }
            }
        },
        "web.DashboardStats": {
            "description": "Dashboard statistics",
            "type": "object",
            "properties": {
                "active_incidents": {
                    "type": "integer",
                    "example": 2
                },
                "avg_response_time": {
                    "type": "integer",
                    "example": 150
                },
                "checks_per_minute": {
                    "type": "integer",
                    "example": 60
                },
                "last_check_time": {
                    "type": "string"
                },
                "protocols": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "recent_incidents": {
                    "type": "integer",
                    "example": 5
                },
                "services_down": {
                    "type": "integer",
                    "example": 1
                },
                "services_unknown": {
                    "type": "integer",
                    "example": 1
                },
                "services_up": {
                    "type": "integer",
                    "example": 8
                },
                "total_checks": {
                    "type": "integer",
                    "example": 1000
                },
                "total_services": {
                    "type": "integer",
                    "example": 10
                },
                "uptime_percentage": {
                    "type": "number",
                    "example": 95.5
                }
            }
        },
        "web.EndpointConfig": {
            "description": "Configuration for a single endpoint",
            "type": "object",
            "properties": {
                "body": {
                    "type": "string",
                    "example": "{\"query\":\"test\"}"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "{\"Authorization\"": "\"Bearer token\"}"
                    }
                },
                "json_path": {
                    "description": "Path to extract value from JSON response",
                    "type": "string",
                    "example": "$.status"
                },
                "method": {
                    "type": "string",
                    "example": "GET"
                },
                "name": {
                    "type": "string",
                    "example": "health-check"
                },
                "password": {
                    "description": "Basic Auth password",
                    "type": "string",
                    "example": "pass"
                },
                "url": {
                    "type": "string",
                    "example": "https://api.example.com/health"
                },
                "username": {
                    "description": "Basic Auth username",
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "web.ErrorResponse": {
            "description": "Error response",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Error description"
                }
            }
        },
        "web.FlatServiceConfig": {
            "description": "Service configuration with flat structure",
            "type": "object",
            "properties": {
                "config": {
                    "description": "JSON object",
                    "type": "object",
                    "additionalProperties": {}
                },
                "endpoint": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "id": {
                    "type": "string",
                    "example": "service-1"
                },
                "interval": {
                    "type": "integer",
                    "example": 30000000000
                },
                "is_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "multi_endpoint": {
                    "description": "Extended HTTP configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/web.MultiEndpointConfig"
                        }
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "Web Server"
                },
                "protocol": {
                    "type": "string",
                    "example": "http"
                },
                "retries": {
                    "type": "integer",
                    "example": 3
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "web",
                        "production"
                    ]
                },
                "timeout": {
                    "type": "integer",
                    "example": 5000000000
                }
            }
        },
        "web.Incident": {
            "description": "Service incident",
            "type": "object",
            "properties": {
                "duration": {
                    "type": "string",
                    "example": "2h30m"
                },
                "id": {
                    "type": "string",
                    "example": "01HXYZ1234567890ABCDEF"
                },
                "message": {
                    "type": "string",
                    "example": "Connection timeout"
                },
                "resolved": {
                    "type": "boolean",
                    "example": false
                },
                "resolved_at": {
                    "type": "string"
                },
                "service_id": {
                    "type": "string",
                    "example": "service-1"
                },
                "service_name": {
                    "type": "string",
                    "example": "Web Server"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "down"
                }
            }
        },
        "web.MultiEndpointConfig": {
            "description": "Configuration for monitoring multiple endpoints",
            "type": "object",
            "properties": {
                "condition": {
                    "description": "JavaScript condition",
                    "type": "string",
                    "example": "response.status === 200"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/web.EndpointConfig"
                    }
                },
                "timeout": {
                    "type": "integer",
                    "example": 10000000000
                }
            }
        },
        "web.ServiceStats": {
            "description": "Service statistics",
            "type": "object",
            "properties": {
                "avg_response_time": {
                    "type": "integer",
                    "example": 150
                },
                "failed_checks": {
                    "type": "integer",
                    "example": 50
                },
                "last_check": {
                    "type": "string"
                },
                "last_incident": {
                    "type": "string"
                },
                "service_id": {
                    "type": "string",
                    "example": "service-1"
                },
                "successful_checks": {
                    "type": "integer",
                    "example": 950
                },
                "total_checks": {
                    "type": "integer",
                    "example": 1000
                },
                "uptime_percent": {
                    "type": "number",
                    "example": 95
                }
            }
        },
        "web.ServiceTableDTO": {
            "description": "Service with incident statistics for table display",
            "type": "object",
            "properties": {
                "active_incidents": {
                    "type": "integer",
                    "example": 2
                },
                "config": {
                    "description": "JSON object"
                },
                "endpoint": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "id": {
                    "type": "string",
                    "example": "service-1"
                },
                "interval": {
                    "type": "integer",
                    "example": 30000000000
                },
                "is_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Web Server"
                },
                "protocol": {
                    "type": "string",
                    "example": "http"
                },
                "retries": {
                    "type": "integer",
                    "example": 3
                },
                "state": {
                    "$ref": "#/definitions/storage.ServiceState"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "web",
                        "production"
                    ]
                },
                "timeout": {
                    "type": "integer",
                    "example": 5000000000
                },
                "total_incidents": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "web.SuccessResponse": {
            "description": "Successful response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Sentinel Monitoring API",
	Description:      "Service with incident statistics for table display",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
